
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДанныеЗадачи = МИКО_аиAPI.ПолучитьДанныеЗадачи(Объект.ИдентификаторЗадачи);
	Если НЕ ДанныеЗадачи.result Тогда
	 	Возврат;
	КонецЕсли;

	Для каждого НомерКОбзвону Из ДанныеЗадачи.data.results Цикл
		ДанныеНомера = Объект.НомераТелефонов.НайтиСтроки(Новый Структура("phoneId",НомерКОбзвону.phoneId));
		Если ДанныеНомера.Количество()=0 Тогда
		 	Продолжить;
		КонецЕсли;	
		Закрыта 		= НомерКОбзвону.closeTime <> "0";
		НачатаОбработка = НомерКОбзвону.state <> "CreateTask";
		Если Закрыта Тогда
			ДанныеНомера[0].Статус = "Отработан";
		ИначеЕсли НачатаОбработка Тогда 	
			ДанныеНомера[0].Статус = "Вызов...";  
		Иначе
			ДанныеНомера[0].Статус = "";  
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если Лев(Данные, 1)<>"<" Тогда
    	Возврат;
	КонецЕсли;
	
	врДанные = РазобратьXML(Данные);	 
	event = врДанные.Получить("devent");
	Если event = "StartDial" Тогда
		_out_number = врДанные.Получить("_out_number");
		Статус = "Вызов...";
	ИначеЕсли event = "EndCall" Тогда	
		_out_number = врДанные.Получить("_out_number");  
		Статус = "Отработан";
	Иначе
		Возврат;
	КонецЕсли;  
	
	phoneId = МИКО_аиAPI.ПреобразоватьНомерДляСохранения(_out_number);	
	ДанныеНомера = Объект.НомераТелефонов.НайтиСтроки(Новый Структура("phoneId",phoneId));
	Если ДанныеНомера.Количество()=0 Тогда
	 	Возврат;
	КонецЕсли;	
	ДанныеНомера[0].Статус = Статус;
КонецПроцедуры


&НаКлиенте
// Парсинг XML сообщения, получение структуры атрибутов.
// 
Функция РазобратьОтветXML(Знач xmlText, Знач Имя = "generic")
	Ответ = РазобратьXML(xmlText,Имя);
	Массив = Ответ.Получить(Имя);	
	Если ТипЗнч(Массив) = Тип("Массив") И Массив.Количество()>0 Тогда
	 	Возврат Массив[0];
	Иначе	
		Возврат (Новый Соответствие);
	КонецЕсли; 
КонецФункции // РазобратьОтветXML()
&НаКлиенте
// Получение атрибутов XML узлов.
// Параметры
//   xmlText - строка: текст XML
//   ПарамИмя- имя узла, если указано, то при первом найденом узле функция вернет ответ завершив парсинг.
//
Функция РазобратьXML(Знач xmlText,парамИмя=Неопределено)
	Узлы = Новый Соответствие;
	
	// найдем начало
	ПозНач = Найти(xmlText, "<") - 1;
	xmlText = СокрЛП(Прав(xmlText, СтрДлина(xmlText) - ПозНач));

	xmlText = СтрЗаменить(xmlText,"'/","' /");
	xmlText = СтрЗаменить(xmlText,"""/>","' />");
	ДлинаСтроки = СтрДлина(xmlText);

	СимволыКонцаИмени = " />";
	ИмяНайдено = Ложь; ИмяЭлемента = ""; СтрокаАтрибутов = "";
	// пробуем получить все атрибуты 
	Для Итератор = 1 По ДлинаСтроки Цикл
		Символ = Сред(xmlText, Итератор, 1);
		
		Если Символ = "<" Тогда
		 	// начало нового элемента
			ИмяНайдено = Ложь; ИмяЭлемента = ""; СтрокаАтрибутов = "";
			Продолжить;
		ИначеЕсли Символ = ">" Тогда
			Атрибуты = ПолучитьАтрибуты(СтрокаАтрибутов);	
		ИначеЕсли ИмяНайдено = Ложь И Найти(СимволыКонцаИмени, Символ) > 0 Тогда 	
			ИмяНайдено = Истина;
			Продолжить;
		ИначеЕсли ИмяНайдено = Ложь Тогда
			
			ИмяЭлемента = ИмяЭлемента + Символ;
			Продолжить;					
		ИначеЕсли ИмяНайдено = Истина Тогда
			СтрокаАтрибутов = СтрокаАтрибутов + Символ;
			Продолжить;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
			// добавляем в результат разбора
			ДобавитьУзел(Узлы, НРег(ИмяЭлемента), Атрибуты);
			Если парамИмя=ИмяЭлемента Тогда
				Прервать;	
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Узлы;
КонецФункции // РазобратьXML()
&НаКлиенте
// Разбирает строку XML в соответсвие ключ - значение
//
Функция ПолучитьАтрибуты(Данные)
	
	Если СтрЧислоВхождений(Данные, "'") = 0 Тогда
		МассивПодстрок=РазложитьСтрокуВМассивПодстрок(Данные,""" ");
	Иначе
		МассивПодстрок=РазложитьСтрокуВМассивПодстрок(Данные,"' ");
	КонецЕсли; 
	
	СимволДвоеточиеПробел="=";
	
	ПараметрыОтвета=Новый Соответствие;
	Для сч=0 по МассивПодстрок.Количество()-1 Цикл
		СтрокаДляРазбора	= СокрЛП(МассивПодстрок[сч]);
		ПозицияРазделителя	= Найти(СтрокаДляРазбора,СимволДвоеточиеПробел);
		ДлинаСтроки			= СтрДлина(СтрокаДляРазбора);
		Если ПозицияРазделителя<>0 Тогда
			Параметр=Лев(СтрокаДляРазбора,ПозицияРазделителя-1);
			Значение=Прав(СтрокаДляРазбора,ДлинаСтроки-ПозицияРазделителя-1);
			Значение=Значение;
			ПараметрыОтвета.Вставить(Параметр,Значение);
		КонецЕсли;	
		
	КонецЦикла;	
	Возврат ПараметрыОтвета;
КонецФункции	
&НаКлиенте
// Добавляет в соотвествие "Узлы" набор атрибутов.
// 
Процедура ДобавитьУзел(Узлы, Знач Имя, Знач Атрибуты)
	Если НЕ ТипЗнч(Узлы) = Тип("Соответствие") Тогда
		Узлы = Новый Соответствие;
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(Имя) Тогда
	 	Возврат;
	КонецЕсли; 
	Если НЕ ТипЗнч(Атрибуты) = Тип("Соответствие") Тогда
	 	Атрибуты = Новый Соответствие; 	
	КонецЕсли; 
	МассивАтр = Узлы.Получить(Имя);
	Если НЕ ТипЗнч(МассивАтр) = Тип("Массив") Тогда
		МассивАтр = Новый Массив;
	КонецЕсли; 	
	МассивАтр.Добавить(Атрибуты);
	Узлы.Вставить(Имя, МассивАтр);
КонецПроцедуры

&НаКлиенте
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",", ВключатьПустые = Истина) Экспорт
	Если СтрДлина(Разделитель) = 1 Тогда
		Попытка
			// Только 8.3.6.1977+
			МассивСтрок = Вычислить("СтрРазделить(Стр, Разделитель, ВключатьПустые)");
			Возврат МассивСтрок;
		Исключение
		КонецПопытки; 	
	КонецЕсли; 

	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			Если ЗначениеЗаполнено(Лев(Стр,Поз-1)) Тогда
				МассивСтрок.Добавить(Лев(Стр,Поз-1));
			ИначеЕсли ВключатьПустые = Истина Тогда	
				МассивСтрок.Добавить(Лев(Стр,Поз-1));
			КонецЕсли; 
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивСтрок;
КонецФункции

