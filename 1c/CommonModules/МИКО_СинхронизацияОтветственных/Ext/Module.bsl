	  
	 
Процедура СинхронизироватьОтветственных() Экспорт
	СинхронизироватьПользователей();	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 150
		|	МИКО_ResponsiblesИзменения.Узел КАК Узел,
		|	МИКО_ResponsiblesИзменения.Контрагент КАК Контрагент,
		|	ЕСТЬNULL(МИКО_Responsibles.number, """") КАК number,
		|	ЕСТЬNULL(МИКО_Responsibles.name, """") КАК name,
		|	ЕСТЬNULL(МИКО_Responsibles.employeeId, """") КАК employeeId,
		|	МИКО_ResponsiblesИзменения.phoneId КАК phoneId
		|ИЗ
		|	РегистрСведений.МИКО_Responsibles.Изменения КАК МИКО_ResponsiblesИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МИКО_Responsibles КАК МИКО_Responsibles
		|		ПО (МИКО_Responsibles.Контрагент = МИКО_ResponsiblesИзменения.Контрагент)";
	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	МассивИзмененные = Новый Массив;	
	Пока Выборка.Следующий() Цикл
 		crmId = Строка(Выборка.Контрагент.УникальныйИдентификатор());		
		Данные = Новый Структура("number,employeeId,name,crmId");    
		Данные.crmId = crmId;
		ЗаполнитьЗначенияСвойств(Данные, Выборка);
		МассивИзмененные.Добавить(Данные);		
	КонецЦикла;
	Если МассивИзмененные.Количество() = 0 Тогда
	 	Возврат; 
	КонецЕсли;
	РезультатИзменений = ОтправитьНаАТСИзмененныеResponsible(МассивИзмененные);

	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		исхNumber = Строка(Выборка.number);
		Успех = Ложь;
		Если РезультатИзменений.result Тогда
			Успех = Истина;
		Иначе
			Для каждого Результат Из РезультатИзменений.data Цикл 
				number = "";
				Если ТипЗнч(Результат) = Тип("Структура") 
					 И Результат.Свойство("number", number) И number = исхNumber  Тогда
					Успех = Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		
		Если Успех Тогда
			УдалитьРегистрациюИзмененийМИКО_Responsible(Выборка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры   

Функция СинхронизироватьПользователей()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 150
		|	МИКО_UsersИзменения.Пользователь КАК Пользователь,
		|	МИКО_Users.position КАК position,
		|	МИКО_Users.number КАК number,
		|	МИКО_Users.name КАК name,
		|	МИКО_Users.crmId КАК crmId,
		|	МИКО_UsersИзменения.Узел КАК Узел
		|ИЗ
		|	РегистрСведений.МИКО_Users.Изменения КАК МИКО_UsersИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МИКО_Users КАК МИКО_Users
		|		ПО (МИКО_Users.Пользователь = МИКО_UsersИзменения.Пользователь)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	МассивИзмененные = Новый Массив;
	МассивУдаленные  = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.Пользователь.ВерсияДанных) Тогда
			// ОбъектУдален и более не существует.
			crmId = Строка(Выборка.Пользователь.УникальныйИдентификатор());
			МассивУдаленные.Добавить(Новый Структура("crmId", crmId));
			Продолжить;
		КонецЕсли;	
		
		Данные = Новый Структура("crmId,position,number,name");
		ЗаполнитьЗначенияСвойств(Данные, Выборка);
		МассивИзмененные.Добавить(Данные);		
	КонецЦикла;
	
	РезультатИзменений = ОтправитьНаАТСИзмененныеUsers(МассивИзмененные);
    РезультатУдаления  = УдалитьДанныеНаАТСUsers(МассивУдаленные);
	Выборка.Сбросить();

	Пока Выборка.Следующий() Цикл
		исхCrmId = Строка(Выборка.Пользователь.УникальныйИдентификатор());
		Успех = Ложь;
		Если РезультатИзменений.result И РезультатУдаления.result Тогда
			Успех = Истина;
		Иначе
			Для каждого Результат Из РезультатИзменений.data Цикл 
				crmId = "";
				Если ТипЗнч(Результат) = Тип("Структура") 
					 И Результат.Свойство("crmId", crmId) И crmId = исхCrmId  Тогда
					Успех = Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла;
			
			Если Успех = Ложь Тогда
				Для каждого Результат Из РезультатУдаления.data Цикл 
					crmId = "";
					Если ТипЗнч(Результат) = Тип("Структура") 
						 И Результат.Свойство("crmId", crmId) И crmId = исхCrmId  Тогда
						Успех = Истина;
						Прервать;
					КонецЕсли; 
				КонецЦикла;			
			КонецЕсли;
		КонецЕсли;
		
		Если Успех Тогда
			УдалитьРегистрациюИзмененийМИКО_Users(Выборка.Узел, Выборка.Пользователь);
		КонецЕсли;
	КонецЦикла;

КонецФункции // СинхронизироватьПользователей()


Функция ОтправитьНаАТСИзмененныеResponsible(Данные) Экспорт
	
	Результат = Новый Структура("result", Ложь);
	ДанныеСессии = Неопределено;
	HTTP = МИКО_аиAPI.СоединениеСАТС(ДанныеСессии);
	Если HTTP = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	ТелоЗапроса = МИКО_аиAPI.СтруктураВJSON(Данные);
	
	Запрос = Новый HTTPЗапрос("/pbxcore/api/module-interception-ivr/v1/responsible/add"); 
	Запрос.Заголовки.Вставить("Cookie", ДанныеСессии);
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	Попытка
		ОтветСервера = HTTP.ОтправитьДляОбработки(Запрос);
		Если ОтветСервера.КодСостояния = 200 Тогда
		 	Результат = МИКО_аиAPI.JSONВСтруктуру(ОтветСервера.ПолучитьТелоКакСтроку());
		КонецЕсли;	
	Исключение
	КонецПопытки;
	
	Возврат Результат;	
КонецФункции  

Функция ОтправитьНаАТСИзмененныеUsers(Данные) Экспорт
	
	Результат = Новый Структура("result", Ложь);
	ДанныеСессии = Неопределено;
	HTTP = МИКО_аиAPI.СоединениеСАТС(ДанныеСессии);
	Если HTTP = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	ТелоЗапроса = МИКО_аиAPI.СтруктураВJSON(Данные);
	
	Запрос = Новый HTTPЗапрос("/pbxcore/api/module-interception-ivr/v1/users/add"); 
	Запрос.Заголовки.Вставить("Cookie", ДанныеСессии);
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	Попытка
		ОтветСервера = HTTP.ОтправитьДляОбработки(Запрос);
		Если ОтветСервера.КодСостояния = 200 Тогда
		 	Результат = МИКО_аиAPI.JSONВСтруктуру(ОтветСервера.ПолучитьТелоКакСтроку());
		КонецЕсли;	
	Исключение
	КонецПопытки;
	
	Возврат Результат;	
КонецФункции  

Функция УдалитьДанныеНаАТСUsers(Данные)

	Результат = Новый Структура("result", Ложь);
	ДанныеСессии = Неопределено;
	HTTP = МИКО_аиAPI.СоединениеСАТС(ДанныеСессии);
	Если HTTP = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	ТелоЗапроса = МИКО_аиAPI.СтруктураВJSON(Данные);
	
	Запрос = Новый HTTPЗапрос("/pbxcore/api/module-interception-ivr/v1/users/delete"); 
	Запрос.Заголовки.Вставить("Cookie", ДанныеСессии);
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	Попытка
		ОтветСервера = HTTP.ОтправитьДляОбработки(Запрос);
		Если ОтветСервера.КодСостояния = 200 Тогда
		 	Результат = МИКО_аиAPI.JSONВСтруктуру(ОтветСервера.ПолучитьТелоКакСтроку());
		КонецЕсли;	
	Исключение
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

// Отмена регистрации в планах обмена.
//
//
Процедура УдалитьРегистрациюИзмененийМИКО_Users(Узел, Пользователь)
	НЗ = РегистрыСведений.МИКО_Users.СоздатьНаборЗаписей();
	НЗ.Отбор.Пользователь.Установить(Пользователь);
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НЗ);	
КонецПроцедуры                                                
Процедура УдалитьРегистрациюИзмененийМИКО_Responsible(Выборка)
	НЗ = РегистрыСведений.МИКО_Responsibles.СоздатьНаборЗаписей();
	НЗ.Отбор.phoneId.Установить(Выборка.phoneId);
	НЗ.Отбор.Контрагент.Установить(Выборка.Контрагент);         
	ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.Узел, НЗ);	
КонецПроцедуры



