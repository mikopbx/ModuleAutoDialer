
// Парсер JSON.
// 
Функция JSONВСтруктуру(_Строка, _Представление="") Экспорт
    	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	Если ТипЗнч(_Строка) = Тип("Строка") Тогда
		Запись = Новый ЗаписьТекста(ИмяВременногоФайла); 
		Запись.Записать(_Строка);
		Запись.Закрыть();
	Иначе	
		_Строка.Записать(ИмяВременногоФайла);
	КонецЕсли;
	
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ИмяВременногоФайла);
	
	СериалОБъектJSON = Неопределено; 
	ТекущийСериалОбъектJSON = Неопределено; 
	
	СимволКавычки=""""; ИмяСвойства="";
	спОткрытыеОбъекты = Новый СписокЗначений;
	Попытка
	Пока ЧтениеJSON.Прочитать() Цикл
		Если ЧтениеJSON.ТипТекущегоЗначения  = ТипЗначенияJSON.НачалоОбъекта или ЧтениеJSON.ТипТекущегоЗначения  = ТипЗначенияJSON.НачалоМассива Тогда
			ТипОбъекта = ?(ЧтениеJSON.ТипТекущегоЗначения  = ТипЗначенияJSON.НачалоОбъекта, "Структура", "Массив");
			
			Если СериалОБъектJSON = Неопределено Тогда
				СериалОБъектJSON = Вычислить("Новый "+ТипОбъекта); 
				ТекущийСериалОбъектJSON = СериалОБъектJSON;
			Иначе
				
				Если ТипЗнч(ТекущийСериалОбъектJSON) = Тип("Массив") Тогда
					Выполнить("ТекущийСериалОбъектJSON.Добавить(Новый "+ТипОбъекта+")"); //добавляем новую структуру / массив
					ТекущийСериалОбъектJSON = Вычислить("ТекущийСериалОбъектJSON.Получить(ТекущийСериалОбъектJSON.Количество()-1)");
				Иначе	
					Выполнить("ТекущийСериалОбъектJSON.Вставить("+СимволКавычки+ИмяСвойства+СимволКавычки+", Новый "+ТипОбъекта+")"); //добавляем новую структуру / массив
					ТекущийСериалОбъектJSON = Вычислить("ТекущийСериалОбъектJSON."+ИмяСвойства);
				КонецЕсли;
			КонецЕсли;
			
			спОткрытыеОбъекты.Добавить(Новый Структура("ТекущийСериалОбъектJSON", ТекущийСериалОбъектJSON));
			
		ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения  = ТипЗначенияJSON.КонецОбъекта или ЧтениеJSON.ТипТекущегоЗначения  = ТипЗначенияJSON.КонецМассива Тогда
		
			спОткрытыеОбъекты.Удалить(спОткрытыеОбъекты.Получить(спОткрытыеОбъекты.Количество()-1));
			
			Попытка
				ТекущийСериалОбъектJSON = спОткрытыеОбъекты.Получить(спОткрытыеОбъекты.Количество()-1).Значение.ТекущийСериалОбъектJSON;
			Исключение
				//дошли до конца
			КонецПопытки;
			
		ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения  = ТипЗначенияJSON.ИмяСвойства Тогда
			ИмяСвойства  = ЧтениеJSON.ТекущееЗначение;
			
			
		ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения  = ТипЗначенияJSON.Null или ЧтениеJSON.ТипТекущегоЗначения  = ТипЗначенияJSON.Булево
			ИЛИ ЧтениеJSON.ТипТекущегоЗначения  = ТипЗначенияJSON.Строка или ЧтениеJSON.ТипТекущегоЗначения  = ТипЗначенияJSON.Число Тогда
			
			    ТекущееЗначение = ЧтениеJSON.ТекущееЗначение;
					
				Если Найти(нрег(ИмяСвойства), "date")>0 Тогда
					Если ЧтениеJSON.ТекущееЗначение="" Тогда
						ТекущееЗначение = Дата(1,1,1);	
					Иначе	
						Попытка
							ТекущееЗначение = Дата(Лев(ТекущееЗначение,4), Сред(ТекущееЗначение,6,2), Сред(ТекущееЗначение,9,2), Сред(ТекущееЗначение,12,2),Сред(ТекущееЗначение,15,2),0);
						Исключение
							//прописать преобразования в дату в ненайденном формате
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				
				Если ТипЗнч(ТекущийСериалОбъектJSON) = Тип("Массив") Тогда
					ТекущийСериалОбъектJSON.добавить(ТекущееЗначение);
				ИначеЕсли ИмяСвойства<>"" Тогда
					ТекущийСериалОбъектJSON.Вставить(ИмяСвойства, ТекущееЗначение);
				КонецЕсли;
			
		Иначе
			ИмяТекущегоЗначения = "";
		КонецЕсли;
	КонецЦикла;
	
	Исключение
	    Сообщить(""+ОписаниеОшибки()+Символы.пс+"Строка json не преобразована: "+_Представление);
		Возврат Новый Массив();
		
	КонецПопытки;
	
	Возврат СериалОБъектJSON
КонецФункции     

// Сериализация в JSON
// 
Функция СтруктураВJSON(Данные) Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	Попытка
		ЗаписатьJSON(ЗаписьJSON, Данные); 
		Результат = ЗаписьJSON.Закрыть();
	Исключение
		Результат = "";
	КонецПопытки;
    Возврат Результат;
КонецФункции // СтруктураВJSON()

// Оставляет в номере телефона только цифры, все остальные символы удаляются.
//
Функция УбратьИзСтрокиТелефонаВсеБуквы(Знач НомерТелефона) Экспорт
	ТолькоЦифрыНомера = "";
	Для а=1 По СтрДлина(НомерТелефона) Цикл
		Если СтрЧислоВхождений("1234567890",Сред(НомерТелефона,а,1)) > 0 Тогда
			ТолькоЦифрыНомера = ТолькоЦифрыНомера + Сред(НомерТелефона,а,1);
		КонецЕсли;
	КонецЦикла;
	Возврат ТолькоЦифрыНомера;
КонецФункции

// Функция сначала убирает из номера телефона все не относящееся к цифрам, а
// затем обрезает значащее количество цифр справа телефонного номера,
// количество этих цифр задается в константе КоличествоХранимыхЦифрТелефона
// возвращает число.
Функция ПреобразоватьНомерДляСохранения(Знач НомерТелефона, ЧислоСимволов = 10, Префикс = "") Экспорт
	НомерТелефона = УбратьИзСтрокиТелефонаВсеБуквы(НомерТелефона);
	Возврат ?(НЕ ЗначениеЗаполнено(НомерТелефона), "", Префикс + Прав(СокрЛП(НомерТелефона), ЧислоСимволов));
КонецФункции

// Функция убирает из номера телефона все префиксы, например, 999-99*99, будет 9999999. 
// 
Функция УбратьИзНомераТелефонаВсеПрефиксы(Знач НомерТелефона, Знач СтрокаПрефиксов=" /*-+=_.\,!;%:?()") Экспорт
	Для НомерПрефикс = 1 По СтрДлина(СтрокаПрефиксов) Цикл
		ТекущийПрефикс = Сред(СтрокаПрефиксов, НомерПрефикс, 1);
		НомерТелефона = СтрЗаменить(НомерТелефона, ТекущийПрефикс, "");
	КонецЦикла;
	Возврат НомерТелефона;
КонецФункции

// Возвращает настройки подключения к АТС.
// 
Функция ПолучитьНастройкиПодключения() Экспорт

	НастройкиПоУмолчанию = Новый Структура("АдресСервера,ПортСервера,Защищенное,Логин,Пароль");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИКО_аиНастройки.Значение КАК Значение,
		|	МИКО_аиНастройки.Ключ КАК Ключ
		|ИЗ
		|	РегистрСведений.МИКО_аиНастройки КАК МИКО_аиНастройки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НастройкиПоУмолчанию.Свойство(Выборка.Ключ) Тогда
		 	НастройкиПоУмолчанию.Вставить(Выборка.Ключ, Выборка.Значение);
		КонецЕсли;
	КонецЦикла; 	
	
	Возврат НастройкиПоУмолчанию;
	
КонецФункции // ПолучитьНастройкиПодключения()

// Сохранение настроек.
// 
Функция СохранитьНастройки(Настройки) Экспорт

	НачатьТранзакцию();
	Для каждого ТекНастройка Из Настройки Цикл
		МЗ = РегистрыСведений.МИКО_аиНастройки.СоздатьМенеджерЗаписи();	
	    ЗаполнитьЗначенияСвойств(МЗ, ТекНастройка);
		МЗ.Записать();
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецФункции	

 // Отправка запроса на сервер, получение ответа
//
// ХостAsterisk = "sip.asterisk.ru"; 
// ПортСервера = 23600;
// ПользовательСтатистики = "statistic"; 
// ПарольПользователяСтатистики = "863****6";
Функция СоединениеСАТС(ДанныеСессии) Экспорт	
	НастройкиПоУмолчанию = ПолучитьНастройкиПодключения();                                                
	HTTP = Неопределено;
	Запрос = Новый HTTPЗапрос("/admin-cabinet/session/start");
	Запрос.Заголовки.Вставить("X-Requested-With", 	"XMLHttpRequest");
	Запрос.Заголовки.Вставить("Content-Type", 		"application/x-www-form-urlencoded");
	// Установка параметров запроса.
	Запрос.УстановитьТелоИзСтроки("&login="+НастройкиПоУмолчанию.Логин+"&password="+НастройкиПоУмолчанию.Пароль+"&"); 
	
	Если НастройкиПоУмолчанию.Защищенное = Истина Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	Иначе	
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Попытка
		HTTP = Новый HTTPСоединение(НастройкиПоУмолчанию.АдресСервера,НастройкиПоУмолчанию.ПортСервера,,,,5,ЗащищенноеСоединение);
		ОтветСервера = HTTP.ОтправитьДляОбработки(Запрос); 
		Если НЕ ОтветСервера.КодСостояния = 200 Тогда
		 	HTTP = Неопределено;
		Иначе
			ДанныеСессии = ОтветСервера.Заголовки.Получить("Set-Cookie");
		КонецЕсли; 
	Исключение
		HTTP = Неопределено;
	КонецПопытки;	
	Возврат HTTP;
КонецФункции


// Пример создания задачи на обзвон.
//
Функция СоздатьЗадачу(ДанныеЗадачи) Экспорт
	Результат = Новый Структура("result", Ложь);
	ДанныеСессии = Неопределено;
	HTTP = СоединениеСАТС(ДанныеСессии);
	Если HTTP = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	ТелоЗапроса = СтруктураВJSON(ДанныеЗадачи);
	
	Запрос = Новый HTTPЗапрос("/pbxcore/api/module-dialer/v1/task"); 
	Запрос.Заголовки.Вставить("Cookie", ДанныеСессии);
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	Попытка
		ОтветСервера = HTTP.ОтправитьДляОбработки(Запрос);
		Если ОтветСервера.КодСостояния = 200 Тогда
		 	Результат = JSONВСтруктуру(ОтветСервера.ПолучитьТелоКакСтроку());
		КонецЕсли;	
	Исключение
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

// Устанавливает новый статус задачи.
// 0 - открыта, 1 - закрыта, 2 - пауза.
Функция ИзменитьСтатусЗадачи(Номер, Статус) Экспорт
	Результат = Новый Структура("result", Ложь);
	ДанныеСессии = Неопределено;
	HTTP = СоединениеСАТС(ДанныеСессии);
	Если HTTP = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Структура  = Новый Структура; 	
	Структура.Вставить("state", Статус);

	ТелоЗапроса = СтруктураВJSON(Структура);

	Запрос = Новый HTTPЗапрос("/pbxcore/api/module-dialer/v1/task/"+ Формат(Номер, "ЧГ=")); 
	Запрос.Заголовки.Вставить("Cookie", ДанныеСессии);
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	Попытка
		ОтветСервера = HTTP.Записать(Запрос);
		Если ОтветСервера.КодСостояния = 200 Тогда
		 	Результат = JSONВСтруктуру(ОтветСервера.ПолучитьТелоКакСтроку());
		КонецЕсли;	
	Исключение
	КонецПопытки;
 	
	Возврат Результат;
КонецФункции // ИзменитьСтатусЗадачи()

// Возвращает модифицированные данные результата обзвона.
// 
Функция УдалитьЗадачу(Номер) Экспорт
	
	Результат = Новый Структура("result", Ложь);
	ДанныеСессии = Неопределено;
	HTTP = СоединениеСАТС(ДанныеСессии);
	Если HTTP = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос("/pbxcore/api/module-dialer/v1/task/" + Формат(Номер, "ЧГ=")); 
	Запрос.Заголовки.Вставить("Cookie", ДанныеСессии);
	
	Попытка
		ОтветСервера = HTTP.Удалить(Запрос);
		Если ОтветСервера.КодСостояния = 200 Тогда
		 	Результат = JSONВСтруктуру(ОтветСервера.ПолучитьТелоКакСтроку());
		КонецЕсли; 
	Исключение
	КонецПопытки;

	Возврат Результат;	
КонецФункции // ПолучитьИзмененныеДанные()

// Возвращает данные задачи и связанные с ней результатов.
// 
Функция ПолучитьДанныеЗадачи(Номер) Экспорт
	
	Результат = Новый Структура("result", Ложь);
	ДанныеСессии = Неопределено;
	HTTP = СоединениеСАТС(ДанныеСессии);
	Если HTTP = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос("/pbxcore/api/module-dialer/v1/task/" + Формат(Номер, "ЧГ=")); 
	Запрос.Заголовки.Вставить("Cookie", ДанныеСессии);

	Попытка
		ОтветСервера = HTTP.Получить(Запрос);
		Если ОтветСервера.КодСостояния = 200 Тогда
		 	Результат = JSONВСтруктуру(ОтветСервера.ПолучитьТелоКакСтроку());
		КонецЕсли; 
	Исключение
	КонецПопытки;

	Возврат Результат;	

КонецФункции // ПолучитьИзмененныеДанные()

// Возвращает все изменения начиная с даты (timestamp)
// 
Функция ПолучитьРезультатыЗадач(timestamp) Экспорт

	Результат = Новый Структура("result", Ложь);
	ДанныеСессии = Неопределено;
	HTTP = СоединениеСАТС(ДанныеСессии);
	Если HTTP = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос("/pbxcore/api/module-dialer/v1/results/" + Формат(timestamp, "ЧГ=")); 
	Запрос.Заголовки.Вставить("Cookie", ДанныеСессии);
	
	Попытка
		ОтветСервера = HTTP.Получить(Запрос);
		Если ОтветСервера.КодСостояния = 200 Тогда
		 	Результат = JSONВСтруктуру(ОтветСервера.ПолучитьТелоКакСтроку());
		КонецЕсли; 
	Исключение
	КонецПопытки; 
	
	Возврат Результат;	
КонецФункции // ПолучитьРезультатыЗадач()

// Возвращает все изменения начиная с даты (timestamp)
// 
Функция ПолучитьРезультатыОпроса(timestamp) Экспорт

	Результат = Новый Структура("result", Ложь);
	ДанныеСессии = Неопределено;
	HTTP = СоединениеСАТС(ДанныеСессии);
	Если HTTP = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос("/pbxcore/api/module-dialer/v1/polling-results/" + Формат(timestamp, "ЧГ=")); 
	Запрос.Заголовки.Вставить("Cookie", ДанныеСессии);
	
	Попытка
		ОтветСервера = HTTP.Получить(Запрос);
		Если ОтветСервера.КодСостояния = 200 Тогда
		 	Результат = JSONВСтруктуру(ОтветСервера.ПолучитьТелоКакСтроку());
		КонецЕсли; 
	Исключение
	КонецПопытки; 
	
	Возврат Результат;	
КонецФункции // ПолучитьРезультатыЗадач()


// Отправка опроса на АТС. Будет сформирован новый dialplan.
// 
Функция СоздатьОпрос(Опрос) Экспорт
	
	Результат = Новый Структура("result", Ложь);
	ДанныеСессии = Неопределено;
	HTTP = СоединениеСАТС(ДанныеСессии);
	Если HTTP = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТелоЗапроса = СтруктураВJSON(Опрос);
	
	Запрос = Новый HTTPЗапрос("/pbxcore/api/module-dialer/v1/polling"); 
	Запрос.Заголовки.Вставить("Cookie", ДанныеСессии);
	
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	Попытка
		ОтветСервера = HTTP.ОтправитьДляОбработки(Запрос);
		Если ОтветСервера.КодСостояния = 200 Тогда
		 	Результат = JSONВСтруктуру(ОтветСервера.ПолучитьТелоКакСтроку()); 
			Результат.Вставить("result", Результат.success)
		КонецЕсли;	
	Исключение
	КонецПопытки;
	
	Возврат Результат;          
КонецФункции


// Возвращает все изменения начиная с даты (timestamp)// Функция ПолучитьРезультатыОценкиКачества(timestamp) Экспорт	Результат = Новый Структура("result", Ложь);	ДанныеСессии = Неопределено;	HTTP = СоединениеСАТС(ДанныеСессии);	Если HTTP = Неопределено Тогда		Возврат Результат;	КонецЕсли;		Запрос = Новый HTTPЗапрос("/pbxcore/api/module-quality-assessment/v1/results/" + Формат(timestamp, "ЧГ=")); 	Запрос.Заголовки.Вставить("Cookie", ДанныеСессии);		Попытка		ОтветСервера = HTTP.Получить(Запрос);		Если ОтветСервера.КодСостояния = 200 Тогда		 	Результат = JSONВСтруктуру(ОтветСервера.ПолучитьТелоКакСтроку());		КонецЕсли; 	Исключение	КонецПопытки; 		Возврат Результат;	КонецФункции // ПолучитьРезультатыЗадач()///// Регламентные задачи.///// Загрузка новых результатов опроса.// Процедура СинхронизацияОценок() Экспорт  	changeTime = Формат(НачалоДня(ТекущаяДата()) - дата(1970,1,1,1,0,0), "ЧГ=0");    			Запрос = Новый Запрос;	Запрос.Текст = 		"ВЫБРАТЬ ПЕРВЫЕ 1		|	МИКО_РезультатыОценкиКачестваОбслуживания.changeTime КАК changeTime		|ИЗ		|	РегистрСведений.МИКО_РезультатыОценкиКачестваОбслуживания КАК МИКО_РезультатыОценкиКачестваОбслуживания		|		|УПОРЯДОЧИТЬ ПО		|	changeTime УБЫВ";		РезультатЗапроса = Запрос.Выполнить();	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    	changeTime = ВыборкаДетальныеЗаписи.changeTime;		Прервать;	КонецЦикла;	ОтветСервера = ПолучитьРезультатыОценкиКачества(changeTime);	КэшДокументов = Новый Соответствие;		НачатьТранзакцию();	Если ОтветСервера.result = Истина Тогда		Для каждого result Из ОтветСервера.data.results Цикл 				МЗ = РегистрыСведений.МИКО_РезультатыОценкиКачестваОбслуживания.СоздатьМенеджерЗаписи();			ЗаполнитьЗначенияСвойств(МЗ, result); 			МЗ.Записать();		КонецЦикла;	КонецЕсли; 	ЗафиксироватьТранзакцию();КонецПроцедуры
